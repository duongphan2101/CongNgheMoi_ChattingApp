const express = require("express");
const jwt = require("jsonwebtoken");
const AWS = require("aws-sdk");
const bcrypt = require("bcryptjs"); // Th∆∞ vi·ªán m√£ h√≥a m·∫≠t kh·∫©u
const multer = require("multer");
require("dotenv").config();

const router = express.Router();

AWS.config.update({
    region: process.env.AWS_REGION,
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY
});

const dynamoDB = new AWS.DynamoDB.DocumentClient();
const TABLE_NAME = "Users";
const s3 = new AWS.S3();

const upload = multer({
    storage: multer.memoryStorage(), // L∆∞u file v√†o b·ªô nh·ªõ t·∫°m th·ªùi
    limits: { fileSize: 1 * 1024 * 1024 }, // Gi·ªõi h·∫°n 1MB
});

// üîπ API: L·∫•y th√¥ng tin user
router.get("/me", async (req, res) => {
    try {
        const token = req.headers.authorization?.split(" ")[1];
        if (!token) return res.status(401).json({ message: "Kh√¥ng c√≥ token!" });

        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        
        // L·∫•y user t·ª´ database
        const params = { TableName: TABLE_NAME, Key: { phoneNumber: decoded.phoneNumber } };
        const { Item: user } = await dynamoDB.get(params).promise();

        if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user!" });

        res.json({
            phoneNumber: user.phoneNumber,
            fullName: user.fullName,
            avatar: user.avatar,
            dob: user.dob,
            email: user.email,
            gender: user.gender,
        });
    } catch (error) {
        res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá!" });
    }
});

// üîπ API: C·∫≠p nh·∫≠t th√¥ng tin user
router.put("/update", async (req, res) => {
    try {
        const token = req.headers.authorization?.split(" ")[1];
        if (!token) return res.status(401).json({ message: "Kh√¥ng c√≥ token!" });

        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const phoneNumber = decoded.phoneNumber;

        const { fullName, dob, gender, email } = req.body;
        if (!fullName && !dob && !gender && !email) {
            return res.status(400).json({ message: "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t!" });
        }

        let updateExp = [];
        let expAttrValues = {};

        if (fullName) {
            updateExp.push("fullName = :fullName");
            expAttrValues[":fullName"] = fullName;
        }
        if (dob) {
            updateExp.push("dob = :dob");
            expAttrValues[":dob"] = dob;
        }
        if (gender) {
            updateExp.push("gender = :gender");
            expAttrValues[":gender"] = gender;
        }
        if (email) {
            updateExp.push("email = :email");
            expAttrValues[":email"] = email;
        }

        if (updateExp.length === 0) {
            return res.status(400).json({ message: "Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ c·∫≠p nh·∫≠t!" });
        }

        const params = {
            TableName: TABLE_NAME,
            Key: { phoneNumber },
            UpdateExpression: "set " + updateExp.join(", "),
            ExpressionAttributeValues: expAttrValues,
            ReturnValues: "ALL_NEW",
        };

        const result = await dynamoDB.update(params).promise();
        res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!", user: result.Attributes });
    } catch (error) {
        console.error("L·ªói c·∫≠p nh·∫≠t:", error);
        res.status(500).json({ message: "L·ªói server!" });
    }
});

// üîπ API: C·∫≠p nh·∫≠t avatar user
router.put("/update-avatar", upload.single("avatar"), async (req, res) => {
    try {
        const token = req.headers.authorization?.split(" ")[1];
        if (!token) return res.status(401).json({ message: "Kh√¥ng c√≥ token!" });

        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const phoneNumber = decoded.phoneNumber;

        const avatarFile = req.file;
        if (!avatarFile) {
            return res.status(400).json({ message: "Vui l√≤ng ch·ªçn ·∫£nh!" });
        }

        const fileExtension = avatarFile.mimetype.split("/")[1];
        const fileName = `${phoneNumber}-${Date.now()}.${fileExtension}`;
        const s3Params = {
            Bucket: process.env.AWS_S3_BUCKET_NAME,
            Key: fileName,
            Body: avatarFile.buffer,
            ContentType: avatarFile.mimetype,
            ACL: "public-read",
        };

        const s3Response = await s3.upload(s3Params).promise();
        const avatarUrl = s3Response.Location;
        console.log("·∫¢nh upload th√†nh c√¥ng, URL:", avatarUrl);

        const updateParams = {
            TableName: TABLE_NAME,
            Key: { phoneNumber },
            UpdateExpression: "set avatar = :avatar",
            ExpressionAttributeValues: { ":avatar": avatarUrl },
            ReturnValues: "ALL_NEW",
        };

        const result = await dynamoDB.update(updateParams).promise();
        res.json({ message: "C·∫≠p nh·∫≠t avatar th√†nh c√¥ng!", user: result.Attributes });
    } catch (error) {
        console.error("L·ªói c·∫≠p nh·∫≠t avatar:", error);
        res.status(500).json({ message: "L·ªói server!", error: error.message });
    }
});

// üîπ API: ƒê·ªïi m·∫≠t kh·∫©u user
router.put("/change-password", async (req, res) => {
    try {
        const token = req.headers.authorization?.split(" ")[1];
        if (!token) return res.status(401).json({ message: "Kh√¥ng c√≥ token!" });

        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const phoneNumber = decoded.phoneNumber;

        const { oldPassword, newPassword, confirmPassword } = req.body;
        if (!oldPassword || !newPassword || !confirmPassword) {
            return res.status(400).json({ message: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
        }
        if (newPassword !== confirmPassword) {
            return res.status(400).json({ message: "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!" });
        }

        const params = { TableName: TABLE_NAME, Key: { phoneNumber } };
        const { Item: user } = await dynamoDB.get(params).promise();

        if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user!" });

        const isMatch = await bcrypt.compare(oldPassword, user.password);
        if (!isMatch) return res.status(400).json({ message: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng!" });

        const hashedPassword = await bcrypt.hash(newPassword, 10);

        const updateParams = {
            TableName: TABLE_NAME,
            Key: { phoneNumber },
            UpdateExpression: "set password = :password",
            ExpressionAttributeValues: { ":password": hashedPassword },
            ReturnValues: "ALL_NEW",
        };

        await dynamoDB.update(updateParams).promise();
        res.json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!" });
    } catch (error) {
        console.error("L·ªói ƒë·ªïi m·∫≠t kh·∫©u:", error);
        res.status(500).json({ message: "L·ªói server!" });
    }
});

module.exports = router;
