const express = require("express");
const AWS = require("aws-sdk");
const verifyToken = require("../middlewares/authMiddleware");

const router = express.Router();
const dynamoDB = new AWS.DynamoDB.DocumentClient();
const TABLE_NAME = "Conversations";
const CHATROOM_TABLE = "ChatRooms";
const MESSAGE_TABLE = "Message";

module.exports = (io) => {
  router.get("/conversations", verifyToken, async (req, res) => {
    try {
      const phoneNumber = req.user.phoneNumber;

      const params = {
        TableName: TABLE_NAME,
        FilterExpression: "contains(participants, :phoneNumber)",
        ExpressionAttributeValues: { ":phoneNumber": phoneNumber },
      };

      const result = await dynamoDB.scan(params).promise();

      if (!result.Items || result.Items.length === 0) {
        return res
          .status(404)
          .json({ message: "Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán n√†o!" });
      }

      res.json(result.Items);
    } catch (error) {
      console.error("L·ªói l·∫•y danh s√°ch conversations:", error);
      res.status(500).json({ message: "L·ªói server!" });
    }
  });

  router.get("/checkChatRoom", async (req, res) => {
    try {
      const { myPhone, userPhone } = req.query;
      if (!myPhone || !userPhone) {
        return res
          .status(400)
          .json({ message: "Thi·∫øu th√¥ng tin s·ªë ƒëi·ªán tho·∫°i!" });
      }

      const params = {
        TableName: "ChatRooms",
        FilterExpression:
          "contains(participants, :myPhone) AND contains(participants, :userPhone)",
        ExpressionAttributeValues: {
          ":myPhone": myPhone,
          ":userPhone": userPhone,
        },
      };

      const result = await dynamoDB.scan(params).promise();

      console.log("result:", result)
      if (result.Items.length > 0) {
        return res.json({ chatRoomId: result.Items[0].chatRoomId });
      } else {
        return res.json({ chatRoomId: null });
      }
    } catch (error) {
      console.error("L·ªói ki·ªÉm tra ph√≤ng chat:", error);
      res.status(500).json({ message: "L·ªói server" });
    }
  });

  const updateParticipantsDataType = async () => {
    try {
      const scanParams = { TableName: TABLE_NAME };
      const data = await dynamoDB.scan(scanParams).promise();

      for (let item of data.Items) {
        if (Array.isArray(item.participants) && item.participants[0].S) {
          // üîπ Chuy·ªÉn t·ª´ [{S: "0975707511"}, {S: "0939409801"}] ‚Üí ["0975707511", "0939409801"]
          const newParticipants = item.participants.map((p) => p.S);

          const updateParams = {
            TableName: TABLE_NAME,
            Key: { chatId: item.chatId },
            UpdateExpression: "SET participants = :newParticipants",
            ExpressionAttributeValues: {
              ":newParticipants": newParticipants,
            },
          };

          await dynamoDB.update(updateParams).promise();
          console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t chatId: ${item.chatId}`);
        }
      }

      // console.log("üéâ C·∫≠p nh·∫≠t ki·ªÉu d·ªØ li·ªáu xong!");
    } catch (error) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ki·ªÉu d·ªØ li·ªáu participants:", error);
    }
  };

  // L·∫•y th√¥ng tin ph√≤ng chat theo chatRoomId
  router.get("/chatRoom", async (req, res) => {
    try {
      const { chatRoomId } = req.query;
      if (!chatRoomId) {
        return res.status(400).json({ message: "Thi·∫øu chatRoomId!" });
      }

      const params = {
        TableName: CHATROOM_TABLE,
        Key: { chatRoomId },
      };

      const result = await dynamoDB.get(params).promise();
      if (!result.Item) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ph√≤ng chat!" });
      }

      res.json(result.Item);
    } catch (error) {
      console.error("L·ªói l·∫•y th√¥ng tin ph√≤ng chat:", error);
      res.status(500).json({ message: "L·ªói server!" });
    }
  });

  // L·∫•y tin nh·∫Øn theo chatRoomId
  router.get("/messages", async (req, res) => {
    try {
      const { chatRoomId } = req.query;
      if (!chatRoomId) {
        return res.status(400).json({ message: "Thi·∫øu chatRoomId!" });
      }

      const params = {
        TableName: MESSAGE_TABLE,
        FilterExpression: "chatRoomId = :chatRoomId",
        ExpressionAttributeValues: { ":chatRoomId": chatRoomId },
      };

      const result = await dynamoDB.scan(params).promise();
      res.json(result.Items);
    } catch (error) {
      console.error("L·ªói l·∫•y tin nh·∫Øn:", error);
      res.status(500).json({ message: "L·ªói server!" });
    }
  });

  router.post("/createConversation", async (req, res) => {
    try {
      const { chatId, chatRoomId, participants, shouldEmit } = req.body;

      const conversationData = {
        chatId,
        chatRoomId,
        isGroup: false,
        participants,
        isUnreadBy: [],
        lastMessage: "",
        lastMessageAt: null,
      };

      // ƒê·ªãnh nghƒ©a tham s·ªë cho DynamoDB
      const conversationParams = {
        TableName: TABLE_NAME,
        Item: conversationData,
      };

      // L∆∞u d·ªØ li·ªáu v√†o DynamoDB
      await dynamoDB.put(conversationParams).promise();

      if (shouldEmit) {
        // L·∫•y th√¥ng tin c·ªßa c·∫£ 2 user tr∆∞·ªõc khi emit
        const usersInfo = await Promise.all(
          participants.map(async (phone) => {
            const userResult = await getUserbySearch(phone, phone);
            return userResult[0];
          })
        );

        // Emit s·ª± ki·ªán newConversation v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
        participants.forEach((phone) => {
          const otherUser = usersInfo.find((u) => u.phoneNumber !== phone);
          io.to(phone).emit("newConversation", {
            participants,
            chatRoomId,
            otherUser, // Th√™m th√¥ng tin user
          });
        });
      }

      res.status(201).json({
        message: "Conversation v√† ChatRoom ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!",
        chatRoomId,
      });
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫°o Conversation v√† ChatRoom:", error);
      res.status(500).json({ message: "L·ªói server!" });
    }
  });

  router.post("/checkConversationExist", async (req, res) => {
    const { chatId } = req.body;

    if (!chatId) {
      return res.status(400).json({ message: "Thi·∫øu chatId!" });
    }

    const params = {
      TableName: TABLE_NAME,
      Key: { chatId },
    };

    try {
      const result = await dynamoDB.get(params).promise();
      if (result.Item) {
        return res
          .status(200)
          .json({ exists: true, chatRoomId: result.Item.chatRoomId });
      } else {
        return res.status(200).json({ exists: false });
      }
    } catch (error) {
      console.error("L·ªói khi ki·ªÉm tra conversation:", error);
      res.status(500).json({ message: "L·ªói server!" });
    }
  });

  // X√≥a h·ªôi tho·∫°i (conversation) nh∆∞ng gi·ªØ l·∫°i ChatRoom
  router.put("/deleteConversation/:chatRoomId", async (req, res) => {
    const chatRoomId = req.params.chatRoomId;

    if (!chatRoomId) {
      return res.status(400).json({ message: "Thi·∫øu chatRoomId!" });
    }

    try {
      // Ki·ªÉm tra xem h·ªôi tho·∫°i c√≥ t·ªìn t·∫°i kh√¥ng
      const scanParams = {
        TableName: "Conversations",
        FilterExpression: "chatRoomId = :chatRoomId",
        ExpressionAttributeValues: {
          ":chatRoomId": chatRoomId,
        },
      };

      const scanResult = await dynamoDB.scan(scanParams).promise();

      console.log("S·ªë l∆∞·ª£ng h·ªôi tho·∫°i t√¨m th·∫•y:", scanResult);

      if (scanResult.Items.length === 0) {
        return res
          .status(404)
          .json({ message: "Kh√¥ng t√¨m th·∫•y h·ªôi tho·∫°i t∆∞∆°ng ·ª©ng!" });
      }

      // L·∫•y chatId c·ªßa h·ªôi tho·∫°i
      const conversation = scanResult.Items[0];
      console.log("H·ªôi tho·∫°i t√¨m th·∫•y:", conversation);
      const chatId = conversation.chatId;
      console.log("ChatId c·ªßa h·ªôi tho·∫°i:", chatId);

      // X√≥a t·∫•t c·∫£ tin nh·∫Øn li√™n quan ƒë·∫øn h·ªôi tho·∫°i
      const queryMsgParams = {
        TableName: MESSAGE_TABLE,
        KeyConditionExpression: "chatRoomId = :chatRoomId",
        ExpressionAttributeValues: { ":chatRoomId": chatRoomId },
      };

      const messagesResult = await dynamoDB.query(queryMsgParams).promise();

      if (messagesResult.Items.length > 0) {
        // X√≥a t·ª´ng tin nh·∫Øn
        const deleteMessagePromises = messagesResult.Items.map((message) => {
          return dynamoDB
            .delete({
              TableName: MESSAGE_TABLE,
              Key: {
                chatRoomId: message.chatRoomId, // Partition key
                timestamp: message.timestamp, // Sort key
              },
            })
            .promise();
        });

        await Promise.all(deleteMessagePromises);
      }

      // X√≥a h·ªôi tho·∫°i kh·ªèi b·∫£ng Conversations
      await dynamoDB
        .delete({
          TableName: "Conversations",
          Key: { chatId }, // S·ª≠ d·ª•ng ƒë√∫ng kh√≥a ch√≠nh
        })
        .promise();

      res.json({
        message:
          "ƒê√£ x√≥a h·ªôi tho·∫°i v√† tin nh·∫Øn th√†nh c√¥ng nh∆∞ng gi·ªØ l·∫°i ph√≤ng chat!",
        chatRoomId,
      });
    } catch (error) {
      console.error("L·ªói khi x√≥a h·ªôi tho·∫°i:", error);
      res.status(500).json({ message: "L·ªói server!" });
    }
  });

  return router;
};
