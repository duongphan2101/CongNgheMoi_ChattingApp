const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const AWS = require("aws-sdk");
const nodemailer = require("nodemailer");
const { v4: uuidv4 } = require("uuid");
require("dotenv").config();

const router = express.Router();

// C·∫•u h√¨nh AWS DynamoDB
AWS.config.update({
  region: process.env.AWS_REGION,
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
});

const dynamoDB = new AWS.DynamoDB.DocumentClient();
const TABLE_NAME = "Users";
const avatar_Default =
  "https://lab2s3aduong.s3.ap-southeast-1.amazonaws.com/man+avatar.png";

router.post("/send-confirmation-email", async (req, res) => {
  try {
    const { email, phoneNumber, password, fullName, gender, dob } = req.body;

    if (!email || !phoneNumber || !password || !fullName) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc." });
    }

    // Ki·ªÉm tra xem s·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i ch∆∞a
    const paramsCheckPhone = {
      TableName: TABLE_NAME,
      Key: { phoneNumber },
    };
    const { Item: existingUserByPhone } = await dynamoDB
      .get(paramsCheckPhone)
      .promise();

    if (existingUserByPhone) {
      return res
        .status(400)
        .json({ message: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω." });
    }

    // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const paramsCheckEmail = {
      TableName: TABLE_NAME,
      IndexName: "EmailIndex", // C·∫ßn c√≥ Global Secondary Index (GSI) cho email
      KeyConditionExpression: "email = :emailValue",
      ExpressionAttributeValues: {
        ":emailValue": email,
      },
    };
    const existingUserByEmail = await dynamoDB
      .query(paramsCheckEmail)
      .promise();

    if (existingUserByEmail.Items.length > 0) {
      return res
        .status(400)
        .json({ message: "Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω v·ªõi t√†i kho·∫£n kh√°c." });
    }

    // N·∫øu email v√† s·ªë ƒëi·ªán tho·∫°i ƒë·ªÅu ch∆∞a t·ªìn t·∫°i ‚Üí G·ª≠i email x√°c nh·∫≠n
    const confirmationToken = jwt.sign(
      { email, phoneNumber, password, fullName, gender, dob },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    const confirmationLink = `http://localhost:3000/confirm-email?token=${confirmationToken}`;
    console.log("üîó Link x√°c nh·∫≠n:", confirmationLink);

    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: "X√°c nh·∫≠n ƒëƒÉng k√Ω t√†i kho·∫£n",
      text: `C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω. Vui l√≤ng nh·∫•n v√†o link sau ƒë·ªÉ x√°c nh·∫≠n: ${confirmationLink}`,
    };

    await transporter.sendMail(mailOptions);

    return res.status(201).json({
      message: "Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c nh·∫≠n t√†i kho·∫£n.",
      success: true,
    });
  } catch (error) {
    console.error("L·ªói khi g·ª≠i email x√°c nh·∫≠n:", error);
    return res.status(500).json({ message: "L·ªói server.", error });
  }
});

router.get("/confirm-email", async (req, res) => {
  try {
    const { token } = req.query;

    if (!token) {
      console.error("‚ö†Ô∏è Token b·ªã thi·∫øu trong y√™u c·∫ßu.");
      return res.status(400).json({ message: "Thi·∫øu token trong y√™u c·∫ßu." });
    }

    console.log("üìå Token nh·∫≠n ƒë∆∞·ª£c:", token);

    // X√°c th·ª±c token
    let decoded;
    try {
      decoded = jwt.verify(token, process.env.JWT_SECRET);
    } catch (err) {
      console.error("‚ùå L·ªói x√°c th·ª±c token:", err.message);
      const errorMessage =
        err.name === "TokenExpiredError"
          ? "Token ƒë√£ h·∫øt h·∫°n."
          : "Token kh√¥ng h·ª£p l·ªá.";
      return res.status(400).json({ message: errorMessage });
    }

    console.log("‚úÖ Token ƒë√£ ƒë∆∞·ª£c gi·∫£i m√£:", decoded);

    const { email, phoneNumber, password, fullName, gender, dob } = decoded;

    if (!phoneNumber || !email || !password || !fullName) {
      return res.status(400).json({
        message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i c√°c tr∆∞·ªùng th√¥ng tin.",
      });
    }

    // Ki·ªÉm tra xem t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i ch∆∞a
    const paramsCheck = {
      TableName: TABLE_NAME,
      Key: { phoneNumber },
    };

    const { Item: existingUser } = await dynamoDB.get(paramsCheck).promise();

    if (existingUser) {
      if (existingUser.isConfirmed) {
        return res.status(400).json({
          message: "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n tr∆∞·ªõc ƒë√≥.",
        });
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh ƒë√£ x√°c nh·∫≠n
      const paramsUpdate = {
        TableName: TABLE_NAME,
        Key: { phoneNumber },
        UpdateExpression: "SET isConfirmed = :true",
        ConditionExpression: "attribute_not_exists(isConfirmed) OR isConfirmed = :false",
        ExpressionAttributeValues: { ":true": true, ":false": false },
      };

      await dynamoDB.update(paramsUpdate).promise();

      return res.status(200).json({
        message: "üéâ T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n th√†nh c√¥ng!",
        success: true,
      });
    }

    // M√£ h√≥a m·∫≠t kh·∫©u
    const hashedPassword = await bcrypt.hash(password, 10);

    // D·ªØ li·ªáu ng∆∞·ªùi d√πng m·ªõi
    const newUser = {
      userID: uuidv4(),
      phoneNumber,
      password: hashedPassword,
      fullName,
      email,
      gender: gender || "unknown",
      isConfirmed: true,
      dob: dob || "unknown",
      avatar: avatar_Default,
      status: "active",
      createAt: new Date().toISOString().split("T")[0],
    };

    // Th√™m t√†i kho·∫£n m·ªõi
    const paramsInsert = {
      TableName: TABLE_NAME,
      Item: newUser,
    };

    await dynamoDB.put(paramsInsert).promise();

    return res.status(200).json({
      message: "üéâ T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!",
      success: true,
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi x√°c nh·∫≠n t√†i kho·∫£n:", error.message);
    return res.status(500).json({ message: "L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau!" });
  }
});

// router.post("/register", async (req, res) => {
//   try {
//     const { phoneNumber, password, fullName, email, gender, dob } = req.body;

//     if (!phoneNumber || !password || !fullName) {
//       return res
//         .status(400)
//         .json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
//     }

//     // Ki·ªÉm tra xem s·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i ch∆∞a
//     const paramsCheck = {
//       TableName: TABLE_NAME,
//       Key: { phoneNumber },
//     };

//     const { Item: existingUser } = await dynamoDB.get(paramsCheck).promise();
//     if (existingUser) {
//       return res
//         .status(400)
//         .json({ message: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω!" });
//     }

//     // M√£ h√≥a m·∫≠t kh·∫©u
//     const hashedPassword = await bcrypt.hash(password, 10);

//     // T·∫°o user m·ªõi
//     const newUser = {
//       userID: uuidv4(),
//       phoneNumber,
//       password: hashedPassword,
//       fullName,
//       email: email || "unknown",
//       gender: gender || "unknown",
//       dob: dob || "unknown",
//       avatar: avatar_Default,
//       status: "active",
//       createAt: new Date().toISOString().split("T")[0],
//     };

//     // L∆∞u v√†o DynamoDB
//     const paramsInsert = {
//       TableName: TABLE_NAME,
//       Item: newUser,
//     };

//     await dynamoDB.put(paramsInsert).promise();

//     return res
//       .status(201)
//       .json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!", user: newUser });
//   } catch (error) {
//     console.error("L·ªói khi ƒëƒÉng k√Ω:", error);
//     return res.status(500).json({ message: "L·ªói server", error });
//   }
// });

router.post("/login", async (req, res) => {
  try {
    const { phoneNumber, password } = req.body;

    if (!phoneNumber || !password) {
      return res
        .status(400)
        .json({ message: "S·ªë ƒëi·ªán tho·∫°i v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc" });
    }

    // Truy v·∫•n DynamoDB ƒë·ªÉ t√¨m user theo phoneNumber
    const params = {
      TableName: TABLE_NAME,
      Key: { phoneNumber },
    };

    const { Item: user } = await dynamoDB.get(params).promise();

    if (!user) {
      return res
        .status(401)
        .json({ message: "S·ªë ƒëi·ªán tho·∫°i ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });
    }

    // So s√°nh m·∫≠t kh·∫©u ƒë√£ m√£ h√≥a
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res
        .status(401)
        .json({ message: "S·ªë ƒëi·ªán tho·∫°i ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });
    }

    // T·∫°o token JWT
    const token = jwt.sign(
      { userID: user.userID, phoneNumber: user.phoneNumber },
      process.env.JWT_SECRET,
      { expiresIn: "7d" }
    );

    res.json({
      token,
      user: {
        userID: user.userID,
        phoneNumber: user.phoneNumber,
        fullName: user.fullName,
        avatar: user.avatar,
      },
    });
  } catch (error) {
    console.error("L·ªói ƒëƒÉng nh·∫≠p:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
});

router.post("/send-reset-link", async (req, res) => {
  try {
    const { phoneNumber } = req.body;

    if (!phoneNumber) {
      return res.status(400).json({ message: "S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc" });
    }

    // Truy v·∫•n DynamoDB ƒë·ªÉ t√¨m user theo phoneNumber
    const params = {
      TableName: TABLE_NAME,
      Key: { phoneNumber },
    };

    console.log("DynamoDB query params:", params);

    const { Item: user } = await dynamoDB.get(params).promise();

    console.log("DynamoDB query result:", user);

    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    // Generate a reset token (for simplicity, using userID)
    const resetToken = jwt.sign(
      { userID: user.userID },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    // Send email with reset link
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    const resetLink = `http://localhost:3000/reset-password?token=${resetToken}&phoneNumber=${phoneNumber}`;

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: user.email,
      subject: "Reset Password",
      text: `Click the link to reset your password: ${resetLink}`,
    };

    await transporter.sendMail(mailOptions);

    return res
      .status(200)
      .json({ message: "Link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n" });
  } catch (error) {
    console.error("L·ªói khi g·ª≠i link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", error);
    return res.status(500).json({ message: "L·ªói server", error });
  }
});

router.post("/reset-password", async (req, res) => {
  try {
    const { phoneNumber, newPassword } = req.body;

    if (!phoneNumber || !newPassword) {
      return res
        .status(400)
        .json({ message: "S·ªë ƒëi·ªán tho·∫°i v√† m·∫≠t kh·∫©u m·ªõi l√† b·∫Øt bu·ªôc" });
    }

    // Truy v·∫•n DynamoDB ƒë·ªÉ t√¨m user theo phoneNumber
    const params = {
      TableName: TABLE_NAME,
      Key: { phoneNumber },
    };

    // console.log("DynamoDB query params:", params);

    const { Item: user } = await dynamoDB.get(params).promise();

    // console.log("DynamoDB query result:", user);

    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi trong DynamoDB
    const paramsUpdate = {
      TableName: TABLE_NAME,
      Key: { phoneNumber },
      UpdateExpression: "set #password = :password",
      ExpressionAttributeNames: {
        "#password": "password",
      },
      ExpressionAttributeValues: {
        ":password": hashedPassword,
      },
    };

    await dynamoDB.update(paramsUpdate).promise();

    return res.status(200).json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!" });
  } catch (error) {
    console.error("L·ªói khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", error);
    return res.status(500).json({ message: "L·ªói server", error });
  }
});

module.exports = router;
